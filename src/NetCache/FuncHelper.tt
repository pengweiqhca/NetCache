<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="../NetCache/FuncHelper.Class.tt"#>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
#if BuildTask
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Cecil.Rocks;
using MethodBuilder = Mono.Cecil.MethodDefinition;
using ModuleBuilder = Mono.Cecil.ModuleDefinition;
using Type = Mono.Cecil.TypeReference;
#else
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
#endif
namespace NetCache
{
    internal partial class FuncHelper
    {
<#  var parameters = new Dictionary<string, string>
    {
        { "key", "1" },
        { "timeSpanType", "2" },
        { "cancellationTokenType", "3" },
    };
    var parameterTypes = parameters.Keys.ToArray();
    var funcs = Enumerable.Range(1, parameterTypes.Length)
        .SelectMany(index => PermutationAndCombination<string>.GetPermutation(parameterTypes, index))
        .Union(new [] { Array.Empty<string>() })
        .OrderBy(types => types.Length)
        .ThenBy(types =>
        {
            var order = 0;

            foreach (var type in types)
                for (var index = 0; index < parameterTypes.Length; index++)
                {
                    if (parameterTypes[index] == type)
                    {
                        order = order * 10 + index;

                        continue;
                    }
                }

            return order;
        })
        .ToArray(); #>
        private Type CreateType(ModuleBuilder module)
        {
            var proxy = module.GetType("NetCache.FuncAdapter@`2");
            if (proxy != null) throw new InvalidOperationException("Type 'NetCache.FuncAdapter@`2' has exits.");
#if BuildTask
            var objectType = module.TypeSystem.Object;
            var timeSpanType = module.ImportReference(typeof(TimeSpan));
            var cancellationTokenType = module.ImportReference(typeof(CancellationToken));
            var taskType = module.ImportReference(typeof(Task<>));
            var valueTaskType = module.ImportReference(typeof(ValueTask<>));
#else
            var objectType = typeof(object);
            var timeSpanType = typeof(TimeSpan);
            var cancellationTokenType = typeof(CancellationToken);
            var taskType = typeof(Task<>);
            var valueTaskType = typeof(ValueTask<>);
#endif
            var adapter = module.DefineType("NetCache.FuncAdapter@`2", TypeAttributes.AutoClass | TypeAttributes.AnsiClass | TypeAttributes.BeforeFieldInit | TypeAttributes.Public | TypeAttributes.Sealed, objectType);

            var gp = adapter.DefineGenericParameters("TK", "TV");

            var func = adapter.DefineField("_func", objectType, FieldAttributes.Private);
#if BuildTask
            var ctor = adapter.DefineMethod(".ctor", MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName, module.TypeSystem.Void, new TypeReference[] { objectType });
#else
            var ctor = adapter.DefineConstructor(MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName, CallingConventions.HasThis, new[] { objectType });
#endif
            ctor.DefineParameter(1, ParameterAttributes.None, "func");
#if BuildTask
            var il = ctor.GetILGenerator();
#else
            var il = ctor.GetILGenerator();
#endif
            il.Emit(OpCodes.Ldarg_0);
#if BuildTask
            il.Emit(OpCodes.Call, module.ImportReference(typeof(object).GetConstructors()[0]));
#else
            il.Emit(OpCodes.Call, objectType.GetConstructors().First());
#endif
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Stfld, func);
            il.Emit(OpCodes.Ret);

            MethodBuilder am;
#if BuildTask
            var key = gp[0].GetElementType();
            var value = gp[1].GetElementType();

            var taskReturnType = module.ImportReference(taskType.MakeGenericInstanceType(value));
            var valueTaskReturnType = module.ImportReference(valueTaskType.MakeGenericInstanceType(value));

            var syncCtor = module.ImportReference(valueTaskType.Resolve().GetConstructors().First(c => !c.Parameters[0].ParameterType.Name.Contains("Task`1")));
            var asyncCtor = module.ImportReference(valueTaskType.Resolve().GetConstructors().First(c => c.Parameters[0].ParameterType.Name.Contains("Task`1")));

            var invoke0 = module.ImportReference(typeof(Func<>).GetMethod("Invoke"));
            var invoke1 = module.ImportReference(typeof(Func<,>).GetMethod("Invoke"));
            var invoke2 = module.ImportReference(typeof(Func<,,>).GetMethod("Invoke"));
            var invoke3 = module.ImportReference(typeof(Func<,,,>).GetMethod("Invoke"));
#else
            var key = gp[0].UnderlyingSystemType;
            var value = gp[1].UnderlyingSystemType;

            var aggressiveInlining = new CustomAttributeBuilder(typeof(MethodImplAttribute).GetConstructor(new[] { typeof(MethodImplOptions) }), new object[] { MethodImplOptions.AggressiveInlining });

            var taskReturnType = taskType.MakeGenericType(value);
            var valueTaskReturnType = valueTaskType.MakeGenericType(value);

            var syncCtor = valueTaskType.GetConstructors().First(c => !c.GetParameters()[0].ParameterType.Name.Contains("Task`1"));
            var asyncCtor = valueTaskType.GetConstructors().First(c => c.GetParameters()[0].ParameterType.Name.Contains("Task`1"));

            var invoke0 = typeof(Func<>).GetMethod("Invoke");
            var invoke1 = typeof(Func<,>).GetMethod("Invoke");
            var invoke2 = typeof(Func<,,>).GetMethod("Invoke");
            var invoke3 = typeof(Func<,,,>).GetMethod("Invoke");
#endif

<#  for (var j = 0; j < 4; j++)
    for (var index = 0; index < funcs.Length; index++)
    { #>
            am = adapter.DefineMethod("Wrap<#= index + funcs.Length * j #>", MethodAttributes.Public | MethodAttributes.HideBySig, <#= j < 1 ? "value" : "valueTaskReturnType" #>, new [] { key, timeSpanType, cancellationTokenType });

            am.DefineParameter(1, ParameterAttributes.None, "key");
            am.DefineParameter(2, ParameterAttributes.None, "expiry");
            am.DefineParameter(3, ParameterAttributes.None, "cancellationToken");
#if BuildTask
            am.AggressiveInlining = true;
            il = am.GetILGenerator();
#else
            am.SetCustomAttribute(aggressiveInlining);
            il = am.GetILGenerator();
#endif
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldfld, func);
#if BuildTask
            il.Emit(OpCodes.Castclass, module.ImportReference(typeof(Func<<#= new String(',', funcs[index].Length) #>>)).MakeGenericInstanceType(<#= string.Join(", ", funcs[index].Union(new [] { j < 2 ? "value" : (j < 3 ? "taskReturnType" : "valueTaskReturnType") })) #>));
#else
            il.Emit(OpCodes.Castclass, typeof(Func<<#= new String(',', funcs[index].Length) #>>).MakeGenericType(<#= string.Join(", ", funcs[index].Union(new [] { j < 2 ? "value" : (j < 3 ? "taskReturnType" : "valueTaskReturnType") })) #>));
#endif
<# foreach (var p in funcs[index])
{ #>
            il.Emit(OpCodes.Ldarg_<#= parameters[p] #>);
<# } #>
            il.Emit(OpCodes.Callvirt, invoke<#= funcs[index].Length #>);
<# if (j == 1)
{ #>
            il.Emit(OpCodes.Newobj, syncCtor);
<# }
else if (j == 2)
{ #>
            il.Emit(OpCodes.Newobj, asyncCtor);
<# } #>
            il.Emit(OpCodes.Ret);

            _wrapMethods[<#= j == 0 ? "-" : "" #>GetIndex(<#  for (var i = 0; i < 3; i++) { #><#= i < funcs[index].Length ? funcs[index][i] == "key" ? "objectType" : funcs[index][i] : "null" #>,<# } #><#= j == 2 ? "taskType" : j == 3 ? "valueTaskType" : "null" #>)] = am;

<# } #>
#if BuildTask
            return adapter;
#elif NETSTANDARD2_0
            return adapter.CreateTypeInfo()!;
#else
            return adapter.CreateType()!;
#endif
        }
    }
}
